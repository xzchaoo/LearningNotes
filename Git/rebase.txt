rebase 操作

假设现在有4个提交
t4
t3
t2
t1

我现在处于t4, 我要将t3和t3融合为一个新的commit, tx, 从而形成
tx(我在这里)
t2
t1
的局面

那么我可以在t4上执行:
git rebase -i t2
接着就会打开一个文本编辑器 让你编辑: 初始内容大概是:
```
pick t3
pick t4
```

如果你直接:wq, 那么相当于没有效果
pick 的意思是 执行该提交, 所以相当于你又在t2的基础上做了t3, t4的提交, 结果是一样的 (id会变吗???)

如果将pick化成 squash, 那么意思是 将该提交合并到前一个提交上
```
pick t3
squash t4
```

当你:wq的时候, 就会提示你 t3 t4将要被合并成一个新的分支, 请你输入该新分支的 commit message

pick 执行该提交
squash 该提交和前一个提交合并
edit 编辑该提交

修改历史的message
假设:
t4 [消息4](我们所在的位置)
t3 [消息3]
t2 [消息2]
t1 [消息1]

假设t2,t3,t4的消息都写错了, 我们需要重新修改消息, 通常是因为你之前的消息里没有包含 change-id 导致你提交失败

那么你可以:
git rebase -i t1: 将内容修改成:
```
edit t2
edit t3
edit t4
```

然后你就会进入一个编辑模式, 此时你身处在t2
你可以通过 git commit --amend 来修改t2的提交, 然后你就可以修改消息2的内容了
让你确认t2你已经修改好了之后, 你可以:
git commit --continue 表示进行下一个处理

如此操作... 直到最后一个完成

过程中如果想要放弃的话可以使用 git rebase --abort

