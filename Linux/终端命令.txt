date +%Y-%m-%d
last xzc 查看用户xzc的最近登录信息
exit 退出中断
whoami查看当前登录的用户id
who查看当前登录的所有用户
passwd修改密码 如果是超级管理员还可以指定别人的账号名
cat 123.txt 显示123.txt的内容
	-n 显示行号
tail head
	从头或尾显示一个文件的几行
	-n number
	tail -n +35 a.txt 从35行显示到完
	tail -f a.txt 显示完尾10行后 程序并没有关闭 而是一直监控着a.txt 一旦a.txt有新的数据加入 马上又会显示
colrm:
	colrm 10 15 < data.txt
	将data.txt的每行的[10,15](下标从1开始)的字符去掉
	如果只给出10,那么就从10以后的字符都删除
split
	用于将一个文件拆成若干文件
	可以制定每个文件保存 n个字节 , n行 产生的文件的前后缀 等等
whereis date
	显示与date相关的文件(比如date这个程序 还有man关于date的手册)在哪里
	-b只显示二进制 -m只显示手册 -s只显示源文件
ls 列出当前目录下的文件
	-a 显示所有文件
	-A 显示所有文件(除了.和..)
su 用root登陆
exit 退出当前登录
sudo 以超级用户执行一条单独的指令
id 打印出当前用户的一些信息
dmesg查看开机信息
tty打印出终端信息
pwd打印出当前目录
env 或 printenv 打印出所有环境变量
命令行下 ^W 删除最近的一个单词 ^U删除整行(其实只是删除当前光标以左) ^H与退格键一样
bc 一个计算器 支持变量 用^D(eof)告诉它输入停止
	scale=3 调整3位小数
	obase=16 输出16进制
	ibase=8 输入用8进制

stty -a 显示键盘映射
which date 告诉你当你输入date并运行,到底运行的是哪个程序
type 跟上面类似 type是一个内置命令
cal 日历
uptime告诉系统已经运行了多久
hostname 计算机的名称(可能会打印出ip地址)
uname打印出操作系统名称
users打印出连接上的用户的信息
w查看用户在干什么
man man | less
	/pattern<Return> 可以搜索pattern
	输入/<Return>可以继续上次的搜索(搜索下一个) 或直接 按n(next)
	要向后搜索的话也可以用?来代替/ 其余一样
less
	less -M 可以打印出进度 第几行到第几行 也可以先less打开文件后 再直接输入 -M来启动(其他的选项也是这样)
	-m显示进度 没-M那么详细
	-I搜索时忽略大小写
	-N行号
	-x4设置tab为4个空格大小
	w或b:后退一页 空格键:前进一页 上下键:行
	q退出
	搜索
		/pattern向下搜索
		?pattern向上搜索
		&pattern只显示满足的行
		n下一个
		N上一个
	g或< 跑到第一行
	G或>跑到最后一行
	n<Return>前进n行
	ng跳到n行
	np跳到n%
	!cmd 执行shell命令
	v启动vi
	less +10g a.txt 打开a.txt 然后马上执行10g 即跳转到第10行
		+后面放着一个语句 less启动后马上执行
	less可以打开多个文件 用:n下一个 :p前一个 :x第一个 :d从列表中删除当前这个 -f或= 显示当前文件名(及其大小等信息) :e c.txt 在当前文件所在的列表位置后面插入c.txt
		在打开多文件的情况下
		使用/*pattern可以跨文件搜索 /pattern只在当前文件搜索 ?*同样
线路规程(line discipline):
	规范模式(canonical mode)
		当你按下<Return>你的数据才会提交
	原始模式(raw mode)
		你以按下某个键就会进行提交
man man 
man intro
hostname显示主机的名字
chmod
umask
whatis date用一句话描述date
apropos=man -k根据关键字查找命令
info 跟man类似
	n:跳转到当前文件的下一个节点
	p:上一个节点
	t:当前节点的头
	按住tab键可以在各种节点链接上切换
chsh 使用chsh改变终端的shell
echo $SHELL 查看当前使用的shell
	echo '$PATH'会输出$PATH
		echo ${PATH#/*:} #表示删除 *: 表示删除的内容  #/*: 表示从头删除直到:(也包括它) 
			比如PATH本来是  /1/2:/2/3:/3/4  那么 ${PATH#/*:}就是/2/3:/3/4  ${PATH#/*2/3:}表示从头删除直到2/3: 结果是/3/4
		## 表示删除最长的那个内容  #/*: 表示从头删除直到第一个:
								##/*: 表示从头删除直到最后一个:
		从后面开始删除%和%%类似#和##
		${PATH%:/ceshi}  表示从最尾巴删除:/ceshi   所以如果$PATH不是以:/ceshi结尾 是不会删除任何内容的
		应该这么说  #是表示最短的匹配 ##是表示最长的匹配 % %%类似
		${变量/旧字符串/新字符串} 替换第一个
		${变量//旧字符串/新字符串} 全部替换
	单引号的内容不会被解析
	双引号的内容则会
在centos下修改~/bashrc使用 export JAVA_HOME=... 来设置环境变量
	其他例子: export PATH=...:$PATH

touch修改一个文件的时间戳 如果这个文件不存在默认会创建一个空文件

sort 1.txt 2.txt | uniq > 3.txt
	-t ':' -k 3 指定以:分割的第三个字段作为关键字
strings
	用于从一个程序里提取字符串
uniq
	常用 sort -u 代替uniq
	要求输入的数据是有序的
	消除重复行 选取重复行 选取唯一行 统计重复行数量
	-c 统计每一行各出现了几次
	-d 只显示重复的行
	-u 打印出唯一的行
	-D 打印出所有重复的行(一行重复会打印出多次) 
	-i 忽略大小写
	-s -f 用于跳过若干字符或字段
join
	接受两个文件(a,b),对于a的每一行的 -1 FIELD1 字段 如果与b中的某些行的 -2 FIELD2 字段相等 那么就把这两行串起来 成为一个新行
	跟数据库的join有点像 select ... from a outer join b on a.FIELD1=b.FIELD2        #所以输出可能会挺多行
tr
	tr abc 123 把收到的 a->1 b->2 c->3
	如果第二个字符串比较少那么就会这样: 比如  abcd 12  跟 abcd 1222 是一样的
	还可以这样用
	tr a-z A-Z 把小写转大写
	tr [:lower:] [:upper:]     # [:digit:]
	-s 本来是一个字符转成另外一个字符 现在是一串字符(这一串字符都满足由第一个字符串所指出的)转成一个字符
	-d 删除字符 即把字符替换为空
	-c表示匹配不在第一个字符串中的字符 用于这种效果
	my name is xzc -> tr -c ' a-z'  * -> ** **** ** ***
	cat text.txt | tr -cs [:alpha:]\' "\n" | sort -fu |wc -l #统计text.txt的去掉重复后的单词个数 它可以正确处理 that's
sed
	流编辑器
	sed 's/abc/ABC/g' names > newnames
	语法:
		[/address|pattern/]s/search/replacement/[g]
		search是正则表达式
		5,10s/.../.../只对[5,10]行进行修改
		5,$s/.../.../只对[5,最后一行]行进行修改
		/CE/s/.../.../只对满足正则表达式CE的行进行修改
	-i 原地修改
rev
	反转每一行(能正确处理中文)
tac
	从最后一行向第一行开始输出
tee
	用于分流
	cat 1.txt | tee 2.txt | wc -l 的作用是将1.txt的内容写到2.txt并在控制台打印出行数
	who | tee status 执行who,并将输出同时输出到控制台和status文件
	如果who输出太长还可以 who | tee status | less
man ls |col -b >ls.txt
help type 打印出一些关于type的帮助信息

使用 export PS1="[\uの\W]$"修改shell的提示
	bash将提示放在PS1的环境变量里

cmp
	比较两个文件 可以指定每个文件的起点,和最多比较几个byte
comm
	接受两个!有序!文件(a,b) 打印出3列信息(也可以只显示某些列)
	第一列显示的是只有a独有的行
	第二列显示的是a和b都有的行
	第三列显示的是只有b独有的行
diff
	-i 忽略大小写  -b忽略空格个数的不同 -B忽略空行   ...不显示注释
	-c 可以使得显示如下:  *表示第一个文件 -表示第二个文件
		*** 1,5 ****
		- i am line 1                  #这一行前面有一个- 表明要删掉这样
		- i am line 2
		  i am line 3
		  你妈比的
		! sdf							#感叹号说明要修改这行
		--- 1,5 ----
		  i am line 3
		+ i am line 4					#+说明要添加行
		+ i am line 5
		  你妈比的
		! niganmaa
	
	使用-u选项可以生成与-c类似 但是没有重复的行
	
	比较两个文件a,b的差别
	输出的信息指示你如何将a修改成b{
		diff a.txt b.txt > patch.txt #将a与b的差别保存成一个文件
		patch a.txt patch.txt #将这个差别应用到a上就可以将a变成b
	}
	
	c(change,改变) d(delete,删除) a(append,追加)
	1,2d0 表示将a的1,2行删除
	3a2,3 表示在a的3行后追加b的2,3行
	5c5 表示将a的5行改成b的第5行
	#2,3表示2至3行#
	每一行前面的 < 或 > 表明这行的数据是来自a 或 b

sdiff
	显示结果如下:
		[xzcの桌面]$sdiff -w 50 a.txt b.txt
		i am line 1	      <
		i am line 2	      <
		i am line 3		i am line 3
					  >	i am line 4
					  >	i am line 5
		你妈比的		你妈比的
		sdf		      |	niganmaa

	-l 如果两行一样 那么只有左边显示这一行的内容 右边用一个 ( 代替
		[xzcの桌面]$sdiff -l -w 50 a.txt b.txt
		i am line 1	      <
		i am line 2	      <
		i am line 3	      (
					  >	i am line 4
					  >	i am line 5
		你妈比的	      (
		sdf		      |	niganmaa
	-s 不显示相同的行
	-w 50 设置所有显示的文本的宽度为50
cut 与colrm相反
	cut -c 10-20 a.txt 表示从a.txt的每行截取[10,20](下标从1开始)
	还可以这样指定
	1,8,10-15表示第一列和第八列和第十至第十五列合起来
	
	cat a.txt | cut -f 3 -d ' '
	用 ' '空格把a.txt split 然后取它的第三个字段(下标从1开始)
	如果改行不含有空格那么会显示整行
paste
	paste a.txt b.txt c.txt 将a,b,c的第一行用Tab join起来成为新的第一行,以此类推
	可以指定 -d='|%' 那么第一个需要分割符的地方会用|,第二个需要分割符号的地方会用%,然后重复使用|%
	例子:
		如果你有一个数据文件(data.txt)你想交换第一列和第三列
		那你可以先把第一列抽出来 1.txt 第2列抽出来2.txt第三列抽出来3.txt 剩余的列抽出来4.txt
		然后paste 3.txt 2.txt 1.txt 4.txt
		#感觉并不特别高效
nl:
	显示行号 可以指定起点和每次的增量
	可以指定不对空行进行统计
wc
	统计字符数 单词数 行数
expand unexpand
	将tab转成空格或相反
	并且可以定制tab的位置
alias lt=ls
alias lt='ls -l temp*'
alias lt 可以查看跟lt相关的别名
unalias lt 取消这个别名


特殊码:用于在双引号字符串中插入信息
	常用:
		\W当前目录的名字 如果在/a/b/c 只显示c
		\u当前用户的标识
		\d日期
		\h计算机的主机名
echo "now is `date`" 反引号内的内容会先执行 然后其结果进行插值


内置命令:
	type:
	basename: basename "c:\\windows/32.exe" 打印出32.exe
	fc -l 显示最近执行过的命令
	history
	fc -s 再次执行上次执行过的命令

删除文件
	先
	ls *.txt 确认这些文件是不是你要删除的
	然后再 fc -s ls=rm 就将对应的文件删除(这样先确认然后再删除,有利于防止失误)

条件执行{
	command1 && command2 在command1执行成功的条件下执行command2
	command1 || command2 注意command2只有在command1没有成功的情况下才会执行
	grep xzc 1.txt > /dev/null && sort 1.txt > 2.txt 如果1.txt里含有xzc 那么 将1.txt排序后写到2.txt里
		注意如果没有> /dev/null的话 grep的结果会被写到输出(这并不是我们想要的)
	command || echo "失败..."  command是一条要执行很久很久的命令...
}

\!* 表示在原始命令行上键入的任何参数

rc(run commands)文件用于存放初始化命令(配置文件)

.bashrc 每次启动shell的时候都会重新加载
.bash_profile 每次登陆的时候重新进行加载

重定向输入输出的标准格式是:
sort 0< in.txt 1>output.txt 2>error.txt
0和1的是可以省略的
放弃输出 sort > /dev/null

用()括起来的语句是会开一个子shell去执行的
子shell就是在一个shell下又打开一个shell
对子shell所进行的修改(shell选项或环境变量的设置)不会影响到父shell
常有这样的语句(cd 某个目录;执行语句)

hexdump
	hexdump -C /bin/grep | less
	od -Ax -tx1z /bin/grep | less

jobs fg bg

正则表达式
	grep "^qu[a-z]\+t$" /usr/share/dict/words 不知为何我需要再+前面加上\ 否则我的centos的grep无法正常工作
	-e
		grep -z 本意是要搜索 包含-z的行 但是... 可以这样做 grep \\-z 或 grep -e -z 推荐后者
		并且使用-e的可以指定多个正则表达式,只要满足其中一个就可以打印出来
		比如 grep -e -ze -e -zi 只要包含 -ze 或 -zi 即可
	-f 指定文件
	-i 忽略大小写
	-v 选择不匹配的行
	-w 匹配单词 grep abc 本来只要包含abc即可 grep -w abc 相当于 \babc\b
	-x 相当于匹配整行 ^pattern$
	-c 打印出匹配的数量 而不是具体内容
	-l -L 打印出哪些文件成功匹配了 哪些文件不成功匹配
	-o 只打印出匹配部分 (本来是打印出所在的行)
	-n 行号
	预定义字符类:
		[:lower:] upper digit alpha almnum punct blank

vim
	在~下.vimrc配置vim 比如下面两行
	set ai
	set nu
	这样每次打开vi 就自动有了 ai和nu 了
	-C 兼容模式(vi) -R只读模式 -r恢复模式(vi将编辑缓冲区保存在一个交换文件中,提供了恢复功能,名字如 .a.txt.sw*)
	命令模式:
		此模式下按Delete会删除字符!
		vi命令:
			保存 退出 切换文件
				ZZ保存再退出与:wq相同
				:q! 退出不保存
				:w 写入到原始文件
				:w file写入到一个新文件里
				:w!file覆盖一个已有文件
				:w>>file追加到文件
				:10,20w>> save
				:e a.txt切换到a.txt       :e!a.txt强制切换
				:e!重开当前文件(忽略所有修改)
			x:删除光标下的字符 X删除光标左边的一个字符
			dd:删除行 D删除当前行光标到行尾的字符 dw删除一个单词 d10w删除10个单词 d10W删除10个单词(忽略标点符号) db删除后面一个单词 d2)删除两个句子 d4}删除4个段落 dG删除当前行到完
			i:插入
			w:前移一个单词
			^G查看当前位置 行 百分比
			^W删除最近一个单词
			^D删掉本行的前导空白
			J合并当前行和下一行
			模式:
				i/a 插入模式 有细微的差别...  insert append
				I跳到行头并且进入插入模式
				A跳到行尾并且进入插入模式
				S/cc删除整行并且跳到行头进入插入模式
				o在当前行的下一行建立一个新行 并且进入插入模式
				O在当前行的上一行建立一个新行 并且进入插入模式
				s替换单个字符为一个字符串 即先删除再插入
				按r可以对当前光标下的字符进行替换(只能进行一次)
				R同上可以进入替换模式
				C删除当前光标及其以右的所有字符 然后进入插入模式
			撤销和重复:
				u撤销上一次操作
				.重复上一次操作
				vi保存着上一次删除的数据 p可以将上一次删除的结果插入在当前光标位置之后 P则是插入在之前
			搜索:
				/pattern ?pattern n和N下一个上一个
			在缓冲区移动:
				^F下一屏
				^B上一屏
				^D下移半屏
				^U上移半屏
				50G可以跳到50行
				:10<Return>可以跳到10行
				:$最后一行
				gg第一行
				G最后一行
				``两个反引号回到上一个位置
				标记某一行 移动到某一行后 输入m 再输入a 则用a标记了当前行 以后就可以使用 `a 回到当前行的准确位置 'a会到当前行的头
				前面同样可以跟数字
			移动光标:
				上下左右 空格键或退格键
				+-移动到上下行的头 <Return>
				0 当前行的头
				$ 当前行的尾
				^ 当前行的头
				w 下一个单词头 W同w但忽略标点符号
				e 下一个单词尾 E...
				b 上一个单词头 B...
				()在句子间移动 句子的定义是一个字符串,以句号逗号问号感叹号结尾,后面至少跟了两个空格或一个\n
				{}在段落间移动
				H移动到屏幕顶部
				M移动到屏幕重要
				L移动到屏幕底部
				可以使用10w 移动到后10个单词的头 其他类似可用 10+ 10-等
			组合命令:
				xp 交换两个字符
				deep 交换两个词
				ddp交换两行
			复制文本:
				接出:不删除就将输入扔入匿名缓冲区
					y yy Y 与 d dd工作方式相同 但是不删除字符 只是把字符放进缓冲区
				:x[,y]:coz xyz都是数字表示将 x至y行复制到z的下一行
				:x[,y]:mz x至y行移动到z的下一行 也可以使用 .表示当前行 $表示最后一行
				还可以使用表达式 .,.+5:m0 表示把当前行和它下面5行移动到第一行的位置
			改变大小写
				~
			常见开关:
				autoindent 自动缩进
				number 行号
				showmode 显示模式
				exrc表示启动vi后还要从当前的工作目录下查找.vimrc 并应用它的配置
					vi启动后默认会从~/.vimrc里加载vim的配置
			常见变量:
				tabstop=4 表示tab=4个空格大小
			执行shell命令:
				:!date执行date命令 :!!执行上一条命令
				:r!date可以将date的结果插入当前行之后
				:r a.txt将a.txt的内容插入当前行之后
				:10r a.txt将a.txt的内容插入第10行后的位置(即第11行)
				:.,.+3!sort 表示将当前行及其下面3行扔给sort并以sort的结果覆盖这4行 #你可以输入这样的命令  3!! 在你输入第二个!的时候 会自动帮你生成 .,.+2!
				:!}fmt表示从当前行到段落结束都发送给fmt 然后替换掉原来的内容
		ex命令:
			:50,60s/abc/xzc/gc 将abc换成xzc g表示全局搜索(否则只会修改第一个abc) c表示在进行改变之前经过你的同意
				50,60表示在50至60行之间进行替换
				.,$表示从当前行到最后一行 1,.表示从第一行到当前行
				%表示编辑缓冲区中的所有行 相当于1,$
			:1,5d 删除[1,5]行
			:q!强制退出不保存
			:q退出
			:set showmode
			:set nu(mber) 显示行号 关闭行号 set nonumber
			:ab abc xzc 之后 当你输入单词 abc的时候就会用xzc去替换它 abc必须以单词的形式出现
			:una abc 取消掉这种替换
			:ab查看所有替换
			:map K deep 创建一个新命令 K 等价于 指令 deep 如果K原来是一条命令 那么会覆盖它(如果它原来的命令不常用那就可以替换他)
				:map * I/*^V<Esc>A */^V<Esc> # I表示进入输入模式(即跳到行首,然后进入输入模式) ^V<Esc>表示进入命令模式
				之后你对某行按* 就会把这行注释起来 /* */
				还可以这样用 F1~F...
				:map <F2> :set all 或 :map #2 :set all <F2>是指你要在那个地方按下F2
			:unmap K 撤掉宏
	输入模式:
		输入的字符直接插入到缓冲区
	如果要插入一个特殊字符要先^V然后再输入比如^C

文件
	用tty查看自己终端所对应的文件 第一个终端显示为 /dev/pts/0 第二个终端显示为/dev/pts/0
	然后在第二个终端里输入 echo "hello~" > /dev/pts/0 就会在第一个终端里发现 hello~
命名管道
	mkfifo fifotest #就会在当前目录下创建一个fifotest文件(但是它跟普通文件还是有点不一样)
	当你向里面写数据 比如重定向> fifotest 你的写入会阻塞直至有人读取了fifotest的数据 比如简单的 cat fifotest
	同样你 cat fifotest也会阻塞 直到有人往里面写数据(其实只要fifotest里面有剩余的数据就行了)
	用 rm fifotest移除
挂载mount 挂载点mount point 卸载umount

mkdir
	-p
rmdir
	-p
	-r
mv
pushd popd dirs

ls
	?单个字符 *任意个字符 [abc] [^abc] {a|b|c} [[:lower:]] upper digit alnum alpha
	-C
	-r
	-R
	-1
	-F
	-A
	-a
	-l 长列表 详细 默认是显示修改时间 可以使用-u让他显示访问时间 -t可以让它按照时间顺序排序文件
	-d 目录
	-s 显示大小
	-h 大小以一个合适的单位
du
	磁盘使用
	-h 合适的单位
	-s 汇总大小 而不是递归出每个子文件的大小
	-c 在末尾显示总量(du可以接受多个文件)
df -h
	查看磁盘剩余容量
file
	查看文件信息
quota
	查看配额情况
touch
cp
	-r 递归 用于复制目录的时候
	-i 替换文件之前进行询问
	-p 使得目标文件和源文件有相同的修改时间/权限等
rm
	rm -r 删除整个目录
	-i 互动模式 会询问你
	-f 强制模式
权限
	文件 读 写 执行
	目录 读 创建/移动/复制/删除 搜索
	setuid 允许用户以别人的uid运行某个文件
	属主才可以改变文件的权限(root也行) root还可以改变文件的属主
	id可以查看自己当前的用户 组 等情况
	groups 显示所有组
	chmod 764 xxx 改变 xxx的权限为 rwxrw-r--
	创建新文件/目录的时候 默认有 不可执行的普通文件:666 可执行普通文件:777 目录:777
		在这一初始模式下再减去用户掩码(usermask)
		可以使用umask 比如umask 022 表示 创建完新文件后 组和其他用户不能拥有 写权限
	清空文件内容:
		shred 可以彻底粉碎一个文件(防止被恢复)
	每个文件都有一个与之对应的i节点 描述了这个文件的一些信息
		可以使用stat filename 查看这些信息
		可以使用 ls -i 查看文件对应的i节点号
	创建新链接:链接一般是指硬链接
		ln file newname 如果newname已经是一个目录的名字了 那么会在它下面创建一个file的链接
		比如 ln a aa 为a创建了一个链接aa 此后 a 和 aa就是完全一样的 对a的修改对体现在aa身上
		如果你rm a 那 aa不会受影响 因为此时链接数还剩下1
	符号链接: 这样的链接在 ls -l 下的最左边会显示一个l 而且符号链接可以用于目录 而硬链接不行
		ln -s 创建出来的文件跟windows下的快捷方式有点像 它的大小取决于链接的文件的名字的长度
		ln -s a aa 那么aa相当于是a的一个快捷方式
		此时去查看a的链接数还是1 因为并不是硬链接
		如果你 rm a 那么以后就不能访问aa了
		用ls列出目录 ls -l| grep ^d  或 ls -d */ 或 ls -F| grep /
		假设有一个a目录 然后 ln -s a aa创建了一个它的符号链接aa
		然后你 cd aa 就会进入到aa目录去,这好像aa就是一个真实的目录一样
		你也可以这样 cd -P aa 这样其实会进入a        -P也可以用于pwd

文件查找
	whereis
	locate test 搜索包含test的文件
	find path... test... action...
		find . -name aa.txt -print
		.表示搜索的路径 -name aa.txt表示测试 要搜索的文件名=aa.txt
			其他的测试还有 -iname aa.txt 不区分大小写 -type=[dfbcpl] 目录/文件/块设备/字符设备/命名管道/符号链接  -perm mode 权限为mode的文件
			-user uid属主为uid -group gid -size [-+]n[cbkMG] -empty 空文件 -+表示小于大于
			还有一堆检测访问时间的
		名字可以使用通配符 * ? [] 记得要先用单引号或双引号引用起来 否则会先被shell解释
		可以对测试取反
		find . -name abc* \! -type f -print 在当前目录下搜索名字满足abc*的非文件 注意!要用\! 或 '!'
			否则会先被shell解释 添加多余的\在其他字母面前也是没影响的
			比如 echo test 打印出test echo \t\e\s\t 也是打印test
		在搜索的是偶如果遇到一些权限错误的话会输出错误信息 可以使用 2> /dev/null扔掉这些信息
		action 动作:
			-print
			-fprint file 写到文件里
			-ls 显示长目录列表
			-fls file
			-delete
			-exec command {} \; 执行command {}部分匹配找到的文件名
			-ok command {} \; 同exec不过会先询问
xargs
	可以将标准输入作为某个程序的运行参数
	还可以使用{}多次引用参数,用-i开启这个功能
	假设a.txt内容是b.txt
	cat a.txt | xargs -i mv {} {}.old
	xargs cat < filenames > all   这句命令的作用是将filenames所指定的文件都汇总到all文件
	ls a.txt b.txt | xargs -i mv {} a 这句的作用是将a.txt b.txt都移动到文件夹a下 -i是因为需要指定参数的位置 而不是简单的堆在 a的后面
进程管理:
	用echo $$显示当前终端的pid
	echo $!显示上一条移到后台的命令的pid
	命令最后加一个 & 表示后台运行
	jobs fg bg
	ps显示进程列表
	suspend将进程挂起 kill发信号
	sleep 1s  单位可以是 s m h d
	set notify 后台作业完成时进行提示
	stty tostop挂起试图向终端写数据的后台作业
	stty -tostop 关闭tostop
	who | cat -c 1-8 | sort | uniq -c & 会提示 [1]4003 4003会是uniq的pid 虽然启动了多个进程但是总的只算一个作业
	用fg切换到某个作业 然后^Z可以暂停这个进程(其实是发送了susp信号) 称为挂起
	如果希望永久停止进程就要用^C
	suspend挂起当前shell
	%%当前作业 %+当前作业 %-前一个作业 %n作业n %name 名字为name的作业 %?name 命令中包含name的作业
	bg n 将作业n移动到后台继续运行

	ps程序 默认只显示与当前用户标识相关的进程
		-f完整输出
		F l ly S可以控制显示的数据列 
		-a显示与任何用户相关的进程(不包含守护进程)
		-e显示所有进程(包括守护进程)
		-p pid显示与进程pid相关的进程
		-u uid显示与uid相关的进程
	pstree
		画进程图
		-A -G用的横线不同
		-p显示进程的pid
		-n按照pid的顺序画图
		pstree -Anp 14411
	fuser file
		用来查看与file相关联的进程的pid
	kill %1 终止作业1
		-l 查看支持的信号
	nice -n priority cmd
		priority可以从-20到19 越小优先级越高 负数优先级高 只有超级管理员才能使用
	renice
		重新改变优先级
		renice -n priority -p pid
echo ${PATH-5566} 如果 $PATH不存在 就显示5566
echo ${PATH:-5566} 如果 $PATH不存在 或 $PATH="" 就显示5566
${PATH+5566}如果PATH存在 就显示5566 否则显示空
${PATH:+5566}如果PATH存在且非空 就显示5566 否则显示空
${PATH=5566} PATH不存在就显示5566 否则显示$PATH

按ctrl alt F[1-6]...进入终端后显示的欢迎界面 是根据 /etc/issue 的内容来的
	issue.net 是给 通过telnet登陆的shell 显示的
/etc/motd 登陆成功后显示一些信息
