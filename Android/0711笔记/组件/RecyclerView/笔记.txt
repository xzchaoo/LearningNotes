效果跟ListView差不多
但是网上的一些评论说它更好用一些
用法如下:
在xml中就跟放一个ListView一样:
	<android.support.v7.widget.RecyclerView
		android:id="@+id/rv"
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		android:scrollbars="none"
		/>
接着
			MyRecyclerViewAdapter adapter = new MyRecyclerViewAdapter(data);
			rv.setLayoutManager(new LinearLayoutManager(某个context));//这步的话可以认为是默认的 当然也有其他选择 比如GridLayoutManager
			rv.setAdapter(adapter);

下面这段代码是选填的,这是由于使用了QuickReturn组件
			int ih = QuickReturnUtils.dp2px(getContext(), 4);
			int ht = getResources().getDimensionPixelSize(R.dimen.twitter_header_height);
			int ft = getResources().getDimensionPixelSize(R.dimen.twitter_footer_height);
			ht = -ht + ih;
			ft = -ft + ih;

			//BOTH与Twitter的区别就是 TWITTER需要下拉一定距离之后才会开始收缩header 而BOTH是一下拉就收缩header
			QuickReturnRecyclerViewOnScrollListener listener = new QuickReturnRecyclerViewOnScrollListener.Builder(QuickReturnViewType.TWITTER)
				.header(a.getPagerSlidingTabStrip())
				.minHeaderTranslation(ht)
				.footer(tv)
				.minFooterTranslation(-ht)
					//.isSnappable(true)
				.build();
			rv.addOnScrollListener(listener);


而Adapter比较复杂一些 长成这样:
	注意下面的代码由于与QuickReturn配合使用因此需要考虑Header部分(即position==0的那一项要特殊处理 防止被QuickReturn的Header盖住内容)
	如果没有雨QuickReturn配合使用的话 那么不用考虑position==0的部分 下面的代码可以精简一下...
	注意RecyclerView的Adapter有些奇怪哦 不过用久了之后就会理解它的精髓了
	public static class MyRecyclerViewActivityAdapter extends RecyclerView.Adapter<MyRecyclerViewActivityAdapter.ViewHolder> {

		@Override
		public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
			View view;
			if (viewType == 0) {
				view = new View(parent.getContext());
				view.setLayoutParams(new RecyclerView.LayoutParams(-1, parent.getResources().getDimensionPixelSize(R.dimen.twitter_header_height)));
			} else {
				view = LayoutInflater.from(parent.getContext()).inflate(R.layout.tv_1, parent, false);
			}
			return new ViewHolder(view, viewType);
		}

		@Override
		public int getItemViewType(int position) {
			return position == 0 ? 0 : 1;
		}

		@Override
		public void onBindViewHolder(ViewHolder holder, int position) {
			if (position > 0) {
				holder.tv.setText("我的内容是" + (position - 1));
			}
		}

		@Override
		public int getItemCount() {
			return 1 + 3;
		}

		public static class ViewHolder extends RecyclerView.ViewHolder {
			public TextView tv;

			public ViewHolder(View view, int type) {
				super(view);
				if (type != 0)
					tv = (TextView) view.findViewById(R.id.tv);
			}
		}
	}
